# -*- coding: utf-8 -*-
"""Mistral7b_Continual_Pretrain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Xt2N0MpZk6xVdYyhm-cSOG2auHNcnNU

Load the LoRA Model and Tokenizer
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# # Installs Unsloth, Xformers (Flash Attention) and all other packages!
# !pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"
# !pip install --no-deps "xformers<0.0.27" "trl<0.9.0" peft accelerate bitsandbytes

from unsloth import FastLanguageModel
import re

from datasets import load_dataset
from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported
from unsloth import UnslothTrainer, UnslothTrainingArguments
import torch

max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None          # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "mistralai/Mistral-7B-v0.3",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 128, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",

                      "embed_tokens", "lm_head",], # Add for continual pretraining
    lora_alpha = 32,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = True,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

"""Prepare Arabic mix Dataset"""

import re

def clean_newlines(text):
    return re.sub(r'(?<!\n)\n(?!\n)', ' ', text)

arabic_wikipedia_prompt = """
العنوان: {}
النص :
{}
"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def arabic_formatting_prompts_func(examples):
    titles = examples["title"]
    texts  = examples["text"]
    outputs = []
    for title, text in zip(titles, texts):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = arabic_wikipedia_prompt.format(title, clean_newlines(text)) + EOS_TOKEN
        outputs.append(text)
    return { "text" : outputs, }
pass

arabic = load_dataset("ayoubkirouane/Arabic_mix", split = "train",)
arabic = arabic.map(arabic_formatting_prompts_func, batched = True,)

"""Start the first round"""

# start The first round of Continuel Pre-Training
trainer = UnslothTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = arabic,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 8,

    args = UnslothTrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 8,

        warmup_ratio = 0.1,
        num_train_epochs = 50,

        learning_rate = 5e-5,
        embedding_learning_rate = 5e-6,

        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.00,
        lr_scheduler_type = "cosine",
        seed = 3407,
        output_dir = "outputs",
    ),
)
trainer_stats = trainer.train()

"""Prepare French mix Dataset"""

french_wikipedia_prompt = """
titre : {}
text :
{}
"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def french_formatting_prompts_func(examples):
    titles = examples["title"]
    texts  = examples["text"]
    outputs = []
    for title, text in zip(titles, texts):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = french_wikipedia_prompt.format(title, clean_newlines(text)) + EOS_TOKEN
        outputs.append(text)
    return { "text" : outputs, }
pass
french = load_dataset("ayoubkirouane/French_mix", split = "train",)
french = french.map(french_formatting_prompts_func, batched = True,)

"""Start the second round"""

# start The second round of  Continued Pre-Training
trainer = UnslothTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = french,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 8,

    args = UnslothTrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 8,
        warmup_steps = 10,
        warmup_ratio = 0.1,
        num_train_epochs = 50,

        # Select a 2 to 10x smaller learning rate for the embedding matrices!
        learning_rate = 5e-5,
        embedding_learning_rate = 1e-5,

        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.00,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
    ),
)
trainer_stats = trainer.train()

"""Start the last round"""

# Load Darija Dataset
darija = load_dataset("ayoubkirouane/Algerian-Darija" , split="v1")

# start The Last round of  Continued Pre-Training
trainer = UnslothTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = darija,
    dataset_text_field = "Text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 8,

    args = UnslothTrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 8,

        warmup_steps = 10,
        warmup_ratio = 0.1,
        num_train_epochs = 5,

        learning_rate = 5e-5,
        embedding_learning_rate = 1e-5,

        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.00,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
    ),
)
trainer_stats = trainer.train()

model.save_pretrained("mistral_darija") # Local saving
tokenizer.save_pretrained("mistral_darija")

"""Inference"""

from unsloth import FastLanguageModel
from transformers import TextStreamer

dtype = None
load_in_4bit = True
max_seq_length=2048

model, tokenizer = FastLanguageModel.from_pretrained(
        model_name = "mistral_darija" ,
        max_seq_length = max_seq_length,
        dtype = dtype,
        load_in_4bit = load_in_4bit,
    )
FastLanguageModel.for_inference(model) # Enable twice as fast inference
 inputs = tokenizer([ "وحد نهار" ], return_tensors = "pt" ).to( "cuda" )


text_streamer = TextStreamer(tokenizer)
_ = model.generate(**inputs, streamer = text_streamer, max_new_tokens = 128)

"""Reference: https://medium.com/@ayoubkirouane3/mistral-7b-meets-darija-a-continual-pre-training-journey-90e037c5cbef

Link code: https://github.com/Kirouane-Ayoub/Mistral-7b-Meets-Darija
"""